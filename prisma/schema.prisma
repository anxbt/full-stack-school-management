generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id        String   @id
  username  String   @unique
  email     String?  @unique
  img       String?
  createdAt DateTime @default(now())

  // Super Admin can manage multiple schools
  schools School[] // Many-to-many relationship
}

model Admin {
  id       String  @id
  username String  @unique
  img      String?

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  @@unique([username, schoolId]) // Unique within school
}

model School {
  id      String  @id @default(cuid())
  name    String
  code    String? @unique // Short identifier (e.g., "GREENWOOD_HS")
  address String?
  phone   String?
  email   String?
  logo    String?
  domain  String? @unique // Optional custom domain

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  superAdmins  SuperAdmin[]
  admins       Admin[]
  teachers     Teacher[]
  students     Student[]
  parents      Parent[]
  Grade        Grade[]
  Class        Class[]
  Subject      Subject[]
  Lesson       Lesson[]
  Exam         Exam[]
  Attendance   Attendance[]
  Event        Event[]
  Announcement Announcement[]
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  birthday  DateTime
  createdAt DateTime @default(now())

  // Add school scoping
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]

  @@unique([username, schoolId]) // Username unique within school
}

model Teacher {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  birthday  DateTime

  // Add school scoping
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  subjects Subject[]
  lessons  Lesson[]
  classes  Class[]

  @@unique([username, schoolId]) // Username unique within school
}

model Parent {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())

  // Add school scoping
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  students Student[]

  @@unique([username, schoolId]) // Username unique within school
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]

  // Add school scoping
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([level, schoolId]) // Grade 1 can exist in multiple schools
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique // "1A", "2B",
  capacity Int

  // Add school scoping
  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]

  @@unique([name, schoolId]) // Class "1A" can exist in multiple schools
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique

  // ðŸ”‘ SCHOOL SCOPING
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  // ðŸ”‘ SCHOOL SCOPING
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]

  // Add school scoping
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  // ðŸ”‘ SCHOOL SCOPING
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  // ðŸ”‘ SCHOOL SCOPING
  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
